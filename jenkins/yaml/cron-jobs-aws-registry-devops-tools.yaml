apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations:
  name: aws-registry-all
  namespace: devops-tools
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          serviceAccountName: jenkins-admin-secrets
          containers:
          - command:
            - /bin/sh
            - -c
            - |-
              ACCOUNT=<ACCOUNT ID>
              REGION=us-east-1
              SECRET_NAME=docker-registry
              EMAIL=example@kuberntes.com
              TOKEN=`aws ecr get-login --region ${REGION} --registry-ids ${ACCOUNT} | cut -d' ' -f6`
              echo "ENV variables setup done."
              kubectl delete secret --ignore-not-found $SECRET_NAME -n devops-tools
              kubectl create secret docker-registry $SECRET_NAME \
              --docker-server=https://${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com \
              --docker-username=AWS \
              --docker-password="${TOKEN}" \
              --docker-email="${EMAIL}" -n devops-tools
              echo "Secret created by name. $SECRET_NAME"
              kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"'$SECRET_NAME'"}]}' -n devops-tools
              echo "All done."
            env:
            - name: AWS_DEFAULT_REGION
              value: us-east-1
            - name: AWS_SECRET_ACCESS_KEY
              value: <AWS_SECRET_ACCESS_KEY>
            - name: AWS_ACCESS_KEY_ID
              value: <AWS_ACCESS_KEY_ID>
            image: odaniait/aws-kubectl:latest
            imagePullPolicy: IfNotPresent
            name: ecr-cred-helper
            resources: {}
            securityContext:
              capabilities: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: Default
          hostNetwork: true
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
  schedule: "0 */6 * * *"
  successfulJobsHistoryLimit: 1
  suspend: false
